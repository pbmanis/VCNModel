"""
Inspect file structure for simulation output
Print a report to the terminal.

This module is part of *vcnmodel*.

Support::

    NIH grants:
    DC R01 DC015901 (Spirou, Manis, Ellisman),
    DC R01 DC004551 (Manis, 2013-2019, Early development)
    DC R01 DC019053 (Manis, 2020-2025, Later development)

Copyright 2017-2022 Paul B. Manis
Distributed under MIT/X11 license. See license.txt for more infomation. 
"""
import pickle
from io import StringIO
from pathlib import Path

import textwrap

import vcnmodel.util.fixpicklemodule as FPM

def main():
    wrapper = textwrap.TextWrapper(initial_indent="", subsequent_indent=" "*27,
        drop_whitespace=False, replace_whitespace=False, width=88)

    fn = "/Volumes/Pegasus_002/BU_simulation_data/Simulations/VCN_c05/Simulations/AN"
    dataname = "AN_Result_VCN_c05_inp=self_XM13A_nacncoop_II_HF=VCN_c05_Full_MeshInflate_standardized_axon_normal_delays_multisite_025_tonepip_030dB_16000.0_HS.p"
    simname = "runANPSTH-all-2021-08-03.12-53-12"
    datafile = Path(fn, simname, dataname)
    print("Is file valid? : ", datafile.is_file())

    textout = StringIO()
    try:
        with open(datafile, "rb") as fh:
                    d = pickle.load(fh, fix_imports=True, encoding="latin1")
    except:
        #import vcnmodel.util.fixpicklemodule as FPM

        try:
            with open(datafile, "rb") as fh:
                d = FPM.pickle_load(
                    fh
                )  # , fix_imports=True) # , encoding="latin1")
        except (ModuleNotFoundError, IOError, pickle.UnpicklingError):
            print(
                "SKIPPING: File is too old; re-run for new structure",
            )
            print(f"File: {str(datafile):s}")
            exit()
    textout.write("The data file is a dictionary with several entries:\n")
    nl = '\n'
    textout.write(f"└── The top level dictionary keys are:  {str([k+nl for k in d.keys()]):s}\n")
    for k in list(d.keys()):
        textout.write(f"└── Key: {k:s}\n")
        # to see the raw information, print this:
        # print("   ", d[k])
        if k in ['basename', 'mode']:
            textout.write(f"    └── contains: {str(d[k]):s}\n")
        if k in ['runInfo', 'Params']:
            fields = [f+nl for f in dir(d[k]) if not f.startswith('__')]
            textout.write("    └── has fields: \n")
            for f in fields:
                textout.write(f"        └── {f:s}")
        if k in ['modelPars']:
            fields = [f for f in d[k].keys()]
            for f in fields:
                try:
                    textout.write(f"    └── contains:  {f:s} = {str(d[k][f]+nl):s}")
                except:
                    textout.write(f"{f:s}, {str(d[k][f])+nl:s}")
        if k in ['Results']:
            textout.write(f"    └── contains: Trials  {str([t for t in d[k].keys()]):s}")
            reskeys = list(d[k][0].keys())
            textout.write(f"        └──  One Trial contains: {nl:s}")
            for r in reskeys:
                textout.write(f"            └──  {r:s} with length of {len(d[k][0][r]):d} elements\n")

    pkldesc = """The directory entry for each simulation file has an associated file with the same
    name as the directory, but holding some information so that the entire dataset does not need
    to be read. These files are generated by DataTablesVCN.py to speed up building the tables
    when new simulations are added.
    The structure is as follows for an example file:"""
    textout.write(pkldesc+"\n")
    simname = Path(fn, simname)
    fnpkl = Path(simname.with_suffix(simname.suffix+".pkl"))
    if fnpkl.is_file():
        textout.write(f"Example file: {str(fnpkl):s}\n")
        with open(fnpkl, "rb") as fh:
            d = pickle.load(fh, fix_imports=True, encoding="latin1")
        dd = d.__dict__
        for k in sorted(list(dd.keys())):
            if k not in ['command_line']:
                textout.write(f"{k:>24s} = {str(dd[k])+nl:<s}")
            else:
                txt = f"{str(dd[k])+nl:<s}"
                txt = wrapper.wrap(txt)
                textout.write(f"{k:>24s} = ")
                for t in txt:
                    textout.write(f"{t:<s}{nl:s}")
                textout.write(nl)

    else:
        print("test pkl file failed!!!")
        print(fnpkl)

    textout.write("[Note that this file also holds the vcnmodel and cnmodel code hashes.]")
    textout.write("Generated by vcnmodel/util/inspect_simulation_file.py")
    textout = textout.getvalue()
    print(textout)

if __name__ == "__main__":
    main()